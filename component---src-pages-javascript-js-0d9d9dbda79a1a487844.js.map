{"version":3,"sources":["webpack://my-gatsby-site/./src/components/card-layout.tsx","webpack://my-gatsby-site/./src/pages/javascript.js"],"names":["CardLayoutWrapper","styled","device","Card","CardTitle","CardDate","contents","base","tag","map","d","id","Link","key","to","frontmatter","slug","title","date","filter","fileAbsolutePath","match","data","allMarkdownRemark","nodes","length"],"mappings":"8JAKMA,EAAoBC,oBAAH,0EAAGA,CAAH,sWAYZC,WAKAA,WAKAA,aAMLC,EAAOF,oBAAH,6DAAGA,CAAH,4NAwBJG,EAAYH,mBAAH,kEAAGA,CAAH,gEAMTI,EAAWJ,mBAAH,iEAAGA,CAAH,gEA6Fd,IA/EmB,SAAC,GAA4B,IAA1BK,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACpC,MAAY,QAARA,EAEA,gBAACR,EAAD,KACGM,EAASG,KACR,SACEC,EAQAC,GAGA,OACE,gBAAC,EAAAC,KAAD,CAAMC,IAAKF,EAAIG,GAAIJ,EAAEK,YAAYC,MAC/B,gBAACb,EAAD,KACE,gBAACC,EAAD,KAAYM,EAAEK,YAAYE,OAC1B,gBAACZ,EAAD,KAAWK,EAAEK,YAAYG,YAkBvC,gBAAClB,EAAD,KACGM,EACEa,QAAO,qBAAGC,iBACQC,MAAjB,mBAA0Cd,EAA1C,IAAkDC,MAEnDC,KACC,SACEC,EASAC,GAGA,OACE,gBAAC,EAAAC,KAAD,CAAMC,IAAKF,EAAIG,GAAIJ,EAAEK,YAAYC,MAC/B,gBAACb,EAAD,KACE,gBAACC,EAAD,KAAYM,EAAEK,YAAYE,OAC1B,gBAACZ,EAAD,KAAWK,EAAEK,YAAYG,c,2ECzG3C,UATuB,SAAC,GAAc,IAAZI,EAAW,EAAXA,KACxB,OACE,gBAAC,IAAD,KACE,8CAAsBA,EAAKC,kBAAkBC,MAAMC,OAAnD,KACA,gBAAC,IAAD,CAAYjB,IAAK,MAAOF,SAAUgB,EAAKC,kBAAkBC","file":"component---src-pages-javascript-js-0d9d9dbda79a1a487844.js","sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { device } from \"../utils/device\";\n\nconst CardLayoutWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 300px);\n  gap: 10px;\n  grid-auto-rows: 120px;\n  justify-content: space-between;\n\n  & a {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  @media ${device.laptop} {\n    grid-template-columns: repeat(auto-fill, 40vw);\n    // justify-content: center;\n  }\n\n  @media ${device.tablet} {\n    grid-template-columns: repeat(auto-fill, 44vw);\n    // justify-content: center;\n  }\n\n  @media ${device.mobileL} {\n    grid-template-columns: repeat(auto-fill, 80vw);\n    justify-content: center;\n  }\n`;\n\nconst Card = styled.div`\n  width: 100%;\n  padding: 0 20px;\n  box-sizing: border-box;\n  border: 1px solid rgba(119, 119, 119, 0.6);\n  border-radius: 5px;\n  -webkit-box-shadow: 0 10px 6px -6px #777;\n  -moz-box-shadow: 0 10px 6px -6px #777;\n  box-shadow: 0 10px 6px -6px #777;\n\n  // @media ${device.laptop} {\n  //   width: 35vw;\n  // }\n\n  // @media ${device.tablet} {\n  //   // width: 44vw;\n  //   width: 100%;\n  // }\n\n  // @media ${device.mobileL} {\n  //   width: 80vw;\n  // }\n`;\n\nconst CardTitle = styled.h4`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst CardDate = styled.h5`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\n// const CardBody = styled.div`\n//   height: 200px;\n//   padding: 5px 5px 0px;\n//   border-radius: 0 0 5px 5px;\n//   overflow: hidden;\n//   background-color: rgba(119, 119, 119, 0.2);\n// `;\n\nconst CardLayout = ({ contents, base, tag }) => {\n  if (tag === \"all\") {\n    return (\n      <CardLayoutWrapper>\n        {contents.map(\n          (\n            d: {\n              frontmatter: {\n                title: React.ReactNode;\n                slug: string;\n                date: string;\n              };\n              html: any;\n            },\n            id: React.Key\n          ) => {\n            // const previewData = d.html?.substring(0, 250); // FIXME: 이거 일단 그냥 string으로 잘랐는데, 문제가 좀 있을듯\n            return (\n              <Link key={id} to={d.frontmatter.slug}>\n                <Card>\n                  <CardTitle>{d.frontmatter.title}</CardTitle>\n                  <CardDate>{d.frontmatter.date}</CardDate>\n                  {/* {previewData ? (\n                  <CardBody\n                    dangerouslySetInnerHTML={{ __html: previewData }}\n                  ></CardBody>\n                ) : (\n                  <CardBody>어쩌면 미리보기..</CardBody>\n                )} */}\n                </Card>\n              </Link>\n            );\n          }\n        )}\n      </CardLayoutWrapper>\n    );\n  }\n\n  return (\n    <CardLayoutWrapper>\n      {contents\n        .filter(({ fileAbsolutePath }) =>\n          fileAbsolutePath.match(`/markdown-pages/${base}/${tag}`)\n        )\n        .map(\n          (\n            d: {\n              frontmatter: {\n                title: React.ReactNode;\n                slug: string;\n                date: string;\n              };\n              html: any;\n              fileAbsolutePath: string;\n            },\n            id: React.Key\n          ) => {\n            // const previewData = d.html?.substring(0, 250); // FIXME: 이거 일단 그냥 string으로 잘랐는데, 문제가 좀 있을듯\n            return (\n              <Link key={id} to={d.frontmatter.slug}>\n                <Card>\n                  <CardTitle>{d.frontmatter.title}</CardTitle>\n                  <CardDate>{d.frontmatter.date}</CardDate>\n                  {/* {previewData ? (\n                  <CardBody\n                    dangerouslySetInnerHTML={{ __html: previewData }}\n                  ></CardBody>\n                ) : (\n                  <CardBody>어쩌면 미리보기..</CardBody>\n                )} */}\n                </Card>\n              </Link>\n            );\n          }\n        )}\n    </CardLayoutWrapper>\n  );\n};\n\nexport default CardLayout;\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport CardLayout from \"../components/card-layout\";\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/markdown-pages/javascript/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          slug\n          date\n        }\n        html\n        fileAbsolutePath\n      }\n    }\n  }\n`;\n\n// markup\nconst JavaScriptPage = ({ data }) => {\n  return (\n    <Layout>\n      <h3>JavaScript Page ({data.allMarkdownRemark.nodes.length})</h3>\n      <CardLayout tag={\"all\"} contents={data.allMarkdownRemark.nodes} />\n    </Layout>\n  );\n};\n\nexport default JavaScriptPage;\n"],"sourceRoot":""}