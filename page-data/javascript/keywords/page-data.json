{"componentChunkName":"component---src-templates-blog-template-js","path":"/javascript/keywords","result":{"data":{"markdownRemark":{"html":"<h2>Keywords</h2>\n<h3>기본형 타입 vs 참조형 타입</h3>\n<ul>\n<li>기본형 타입 <code class=\"language-text\">primitive type</code>: number, string, boolean, null, undefined, <code class=\"language-text\">Symbol</code></li>\n<li>참조형 타입 <code class=\"language-text\">reference type</code>: Object, Array, Function , Date, RegExp, <code class=\"language-text\">Map, WeakMap, Set, WeakSet</code></li>\n<li><code class=\"language-text\">여기</code> 있는것 es6에서 추가된 것을 의미</li>\n<li>\n<p>기본형과 참조형이 어떻게 다른가?</p>\n<ul>\n<li>기본형은 복사를 할때, 값자체를 복사한다. number를 복사하면 해당 숫자 <code class=\"language-text\">값</code> 자체를 복사한다는 말</li>\n<li>참조형은 복사를 할때, 주소를 복사한다. 긍께, <code class=\"language-text\">Array</code>를 복사하면 <code class=\"language-text\">값</code>이 아니라 <code class=\"language-text\">Array 자체의 메모리상의 주소</code>를 복사한다.</li>\n<li>call by value랑 call by reference 차이다. Value를 넘기느냐, Reference를 넘기느냐</li>\n</ul>\n</li>\n<li>JavaScript는 숫자를 정수형, 부동소수점형 이런거 구분없이 그냥 무조건 <code class=\"language-text\">64byte</code>할당한다.</li>\n<li>\n<p>메모리에서 변수가 저장이 되는 영역이 있고, 데이터 자체가 저장되는 영역은 따로 있다.</p>\n<ul>\n<li>이렇게 한 이유는 변수에 들어있는 데이터가 변할때 메모리 상의 공간을 더 차지할 수도 있는데, 변수와 데이터를 따로 저장하면 데이터가 변할때, 메모리의 새로운 공간에 데이터를 쓰고, 변수에는 이 새로운 공간의 주소만 업데이트 해주면 된다</li>\n<li>그리고 같은 데이터값은 서로 다른 변수가 공용으로 사용할 수 있어서 중복되는 값을 메모리의 여러 곳에 저장할 필요가 없어진다.</li>\n</ul>\n</li>\n</ul>\n<h3>불변성이란? Immutability</h3>\n<ul>\n<li>메모리상에서 변경가능하지 않는 것</li>\n<li>\n<p>number, string 등은 Immutable 하다. 왜?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이때 보면 a의 값이 변했으니 number가 어째서 immutable 한가 싶을 수 있다. 하지만 1 이 저장된 메모리상의 공간 자체를 찾아가서 2라고 값을 업데이트 하지않는다.\n메모리의 새로운 공간에 2라는 값을 저장하고, 변수영역은 새로운 주소를 가진다. 즉 값 자체는 <code class=\"language-text\">Immutable</code>하다.</p>\n</li>\n</ul>\n<h3>참조형이 메모리에 생성되는 과정</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 있다면 arr은 변수영역에 저장된다.</p>\n<p>그리고 JavaScript는 얘가 데이터 뭉치라는 것을 보고 <code class=\"language-text\">데이터 뭉치가 들어갈 메모리 상의 공간을 확보</code>하고 <code class=\"language-text\">이 공간의 주소를 데이터 영역에 저장</code>한다음, 이 값이 저장된 곳의 주소를 <code class=\"language-text\">arr이 참조</code>한다.</p>\n<h3>불변 객체를 만드는 방법</h3>\n<ul>\n<li>얕은 복사가 아니라 깊은 복사를 하기 위해 순회를 하거나 라이브러리를 쓸 수 있다. <a href=\"https://praxent.com/blog/immer-js-for-immutability-react\">immer vs immutable.js</a></li>\n</ul>\n<h3>undefined vs null</h3>\n<p><a href=\"https://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript\">undefined vs null</a></p>\n<ul>\n<li>undefined: 값이 없는거</li>\n<li>null: 이건 선언해야한다. 아무값도 아니라고</li>\n</ul>\n<h3>실행 컨텍스트(execution context)란?</h3>\n<ul>\n<li><code class=\"language-text\">실행 컨텍스트</code>: 실행할 코드에 제공할 환경 정보들을 모아놓은 객체</li>\n<li><code class=\"language-text\">콜 스택</code>: <code class=\"language-text\">실행 컨텍스트</code>가 순서대로 쌓이는곳. 위에꺼부터 꺼내서 실행한다</li>\n</ul>\n<h3>활성화된 실행 컨텍스트가 가지는 정보</h3>\n<ul>\n<li><code class=\"language-text\">VariableEnvironment</code>: 최초의 스냅샷</li>\n<li>\n<p><code class=\"language-text\">LexicalEnvironment</code>: 변경사항이 계속 반영</p>\n<ul>\n<li><code class=\"language-text\">environmetRecord</code>:</li>\n<li>현재 컨텍스트 내의 식별자 정보를 저장하는 것. 내부전체를 읽고 순서대로 데이터를 수집하는데 이걸 <code class=\"language-text\">hoisting(호이스팅)</code>이라고 한다. 마치 변수를 젤 위에 모아서 선언해놓은 느낌</li>\n<li><code class=\"language-text\">outerEnvironmentReference</code>:</li>\n<li>어떤 컨텍스트가 활성화 될때, 이 활성화되는 환경(직전 컨텍스트)의 <code class=\"language-text\">lexical environmet</code>, 즉 현재 상태를 가리키는 것.</li>\n<li>이전 실행 컨택스트를 가리킨다고 생각</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// funcA</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (1)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>전역컨텍스트는 <code class=\"language-text\">outerEnvironmentReference</code>가 없다. 그런데 funcA는 전역 컨텍스트가 호출하기 때문에, 전역객체의 <code class=\"language-text\">lexical environmet</code> 지금 상태를 가리킨다.\n그래서 (1) 에서 a가 funcA 내에 없기때문에 <code class=\"language-text\">outerEnvironmentReference</code> 얘를 타고 참조해서 전역객체의 a 값을 읽어온다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">ThisBinding</code>: this가 뭔지</p>\n<ul>\n<li>컨텍스트가 활성화 될때 뭐 딱히 지정안했으면 전역객체다. 브라우저에서는 <code class=\"language-text\">window</code>, node 에서는 <code class=\"language-text\">global</code></li>\n</ul>\n</li>\n</ul>\n<h3>함수 선언문과 함수 표현식</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 선언문 방식: function 함수이름 일케만 쓴다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//함수표현식인데, 함수에 이름은 없다. 이렇게쓸때는 이름을 안써도 된다.</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이렇게도 된다</span></code></pre></div>\n<ul>\n<li>호이스팅할때 함수 선언문 방식은 함수 전체가 호이스팅 되지만, 함수표현식의 경우에 변수만 호이스팅되고, 함수자체는 나중에 해당 위치에서 할당된다고 생각하면 된다.</li>\n</ul>\n<h3>스코프</h3>\n<p><a href=\"https://poiemaweb.com/js-scope\">상세</a></p>\n<ul>\n<li><code class=\"language-text\">let, const</code> 키워드를 쓰면 다른 언어와 같이 block단위의 스코핑을 지원하는데 var를 쓰면 함수단위로 스코핑한다. let, const를 사용하자</li>\n</ul>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/78586788?OzSrank=1\">코어 자바스크립트 책</a></li>\n<li><a href=\"https://ko.javascript.info/js\">JavaScript.info</a></li>\n</ul>","frontmatter":{"date":null,"slug":"/javascript/keywords","title":"JavaScript Keywords 정리"}}},"pageContext":{"birthTime":"2021-03-08T06:36:53.846Z","modifiedTime":"2021-03-09T16:21:17.492Z","slug":"/javascript/keywords"}},"staticQueryHashes":["1947816842"]}